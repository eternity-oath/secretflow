# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Ant Group Co., Ltd.
# This file is distributed under the same license as the SecretFlow package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: SecretFlow \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-19 03:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../developer/design/teeu.md:1 ../../developer/design/teeu.md:35
#: ../../developer/design/teeu.md:140
msgid "TEEU"
msgstr "TEEU 设备"

#: ../../developer/design/teeu.md:2
msgid "Introduction to TEE"
msgstr "TEE介绍"

#: ../../developer/design/teeu.md:3
msgid ""
"Trusted Execution Environment (TEE) is a hardware-based privacy "
"preserving technology. It ensures the authenticity of executing code, the"
" integrity of runtime state (such as CPU registers, memory, and sensitive"
" I/O), and the confidentiality of code, data, and runtime state stored in"
" memory. In addition, it should be possible to provide remote attestation"
" to third parties to prove its reliability."
msgstr ""
"可信执行环境(Trusted Execution Environment，TEE) "
"是一种基于硬件的隐私保护技术。它保证了执行代码的真实性，运行时状态(如CPU寄存器、内存和敏感I/O)的完整性，以及存储在内存中的代码、数据和运行时状态的机密性。此外，还应能够向第三方提供远程认证，以证明其可靠性。"

#: ../../developer/design/teeu.md:5
msgid ""
"At present, there are many privacy-preserving computation techniques, "
"such as Multi-Party secure Computing(MPC), Homomorphic Encryption(HE), "
"Federated Learning(FL), and TEE. MPC, HE, and TEE all have relatively "
"clear security models that can protect data privacy during computation. "
"Among them, MPC and HE are mainly based on pure cryptography theory, "
"which has the advantage of provable security, but due to relying on a "
"large number of complex calculations, resulting in low computing "
"performance, it is currently difficult to use in large-scale scenarios. "
"TEE is a solution based on secure hardware, which has the advantages of "
"good versatility and supports large-scale computing, but the disadvantage"
" is that it needs to rely on hardware."
msgstr ""
"目前隐私保护计算路线繁多，比如多方安全计算（Multi-Party secure Computing，MPC）、同态加密（Homomorphic "
"Encryption，HE）、联邦学习（Federated Learning，FL）以及 TEE "
"等。MPC、HE和TEE都具备比较清晰的安全模型，可以做到保护计算过程中的数据隐私。其中，MPC和HE主要是基于纯密码学理论，优点是安全可证明，但由于依赖大量复杂计算，导致计算性能较低，目前难以在大规模场景上使用。而TEE是基于安全硬件的方案，优点是通用性好，支持大规模计算，缺点是需要信赖硬件。"

#: ../../developer/design/teeu.md:7
msgid ""
"TEE itself also has a variety of implementations (such as Intel SGX, "
"Intel TDX, Arm TrustZone, Arm CCA, AMD SEV, Hygon CSV, etc.), and its "
"principles are slightly different. At present, SecretFlow mainly supports"
" Intel Software Guard Extensions(SGX) 2.0, so we will take SGX as an "
"example to briefly introduce the principle of TEE."
msgstr ""
"TEE本身也有多种实现（比如Intel SGX、Intel TDX、Arm TrustZone、Arm CCA、AMD SEV、Hygon "
"CSV等），其原理也略有不同，目前隐语支持的主要是Intel SGX 2.0（Software Guard "
"Extensions），我们以SGX为例简单介绍TEE的原理。"

#: ../../developer/design/teeu.md:9
msgid "SGX: Enclave"
msgstr ""

#: ../../developer/design/teeu.md:10
msgid ""
"Enclave can be regarded as the secure and trusted part of a process, "
"where the confidentiality and integrity of the running programs and data "
"are protected by SGX. The memory which Enclave resides in is encrypted, "
"and other system software, including the Operating System (OS), Virtual "
"Machine Monitor (VMM), System Management Mode (SMM), and BIOS, cannot "
"access enclave except for itself and the CPU, thus preventing malicious "
"attacks on enclave."
msgstr ""
"Enclave可以被视为进程中安全可信的部分，其中运行的程序和数据的机密性和完整性受到SGX的保护。Enclave所处的内存是加密的，除了Enclave自身和CPU之外，其他系统软件包括"
" Operating system (OS), Virtual Machine Monitor (VMM), System Management "
"Mode (SMM), BIOS 等都无法访问 Enclave，从而避免 Enclave 被恶意攻击。"

#: ../../developer/design/teeu.md:12
msgid ""
"The yellow part in the diagram below represents enclave. As shown, in the"
" standard SGX model, applications are divided into trusted and untrusted "
"parts, with enclave being the trusted part and the code and data running "
"outside being the untrusted part."
msgstr ""
"下图中黄色部分表示了 Enclave。从图中我们可以看到，在标准的SGX模型下，应用被分为可信和不可信两部分，可信部分为 "
"Enclave，非可信部分为运行在外面的代码和数据"

#: ../../developer/design/teeu.md:14
msgid "![image.png]( ./resources/enclave.png )"
msgstr ""

#: ../../developer/design/teeu.md:14
msgid "image.png"
msgstr ""

#: ../../developer/design/teeu.md:16
msgid ""
"For a more detailed introduction to enclave, you can read [SGX "
"Enclave](https://www.intel.com/content/dam/develop/external/us/en/documents"
"/overview-of-intel-sgx-enclave-637284.pdf)"
msgstr ""
"关于enclave的更详细介绍，可以阅读 [SGX "
"Enclave](https://www.intel.com/content/dam/develop/external/us/en/documents"
"/overview-of-intel-sgx-enclave-637284.pdf)"

#: ../../developer/design/teeu.md:18
msgid "SGX: Remote Attestation"
msgstr "SGX: 远程认证"

#: ../../developer/design/teeu.md:19
msgid ""
"Remote attestation provides a way to allow a remote user to verify the "
"genuineness of software in a remote process."
msgstr "远程认证提供了一种方法，允许远程用户验证远程进程中软件的真实性。"

#: ../../developer/design/teeu.md:21
msgid "Remote attestation can verify the following:"
msgstr "远程认证可以对以下内容进行验证："

#: ../../developer/design/teeu.md:22
msgid "The enclave runs inside SGX;"
msgstr "Enclave运行在SGX内部"

#: ../../developer/design/teeu.md:23
msgid "The enclave runs on a system with the latest security level;"
msgstr "Enclave运行在具有最新安全级别的系统上"

#: ../../developer/design/teeu.md:24
msgid "The enclave code"
msgstr "Enclave的代码"

#: ../../developer/design/teeu.md:26
msgid ""
"Through remote attestation, users can ensure that the enclave  is "
"reliable and the running code has not been tampered with."
msgstr "通过远程认证，用户可以确保enclave运行环境是可靠的，且运行的代码未被篡改。"

#: ../../developer/design/teeu.md:28
msgid ""
"Currently SGX supports two types of remote attestation: ECDSA (Elliptic "
"Curve Digital Signature Algorithm) attestation and Intel EPID (Intel "
"Enhanced Privacy ID ) attestation. Among them, ECDSA needs to be used "
"together with Intel SGX DCAP (Intel Software Guard Extensions Data Center"
" Attestation Primitives). The third-generation Intel Xeon Scalable and "
"some Xeon E3 processors support ECDSA attestation, and some Intel Core, "
"Intel Xeon E, and Intel Xeon E3 processors support EPID attestation."
msgstr ""
"目前SGX支持两种类型的远程认证：ECDSA（Elliptic Curve Digital Signature Algorithm）认证和 "
"Intel EPID(Intel Enhanced Privacy ID) 认证。其中，ECDSA 需要配合 Intel SGX "
"DCAP（Intel Software Guard Extensions Data Center Attestation "
"Primitives）一齐使用。第三代 Intel Xeon Scalable 和部分 Xeon E3处理器支持 ECDSA 认证，部分 "
"Intel Core、Intel Xeon E 和 Intel Xeon E3 支持 EPID 认证。"

#: ../../developer/design/teeu.md:30
msgid "SecretFlow currently only supports ECDSA attestation mode."
msgstr "SecretFlow目前仅支持ECDSA认证模式。"

#: ../../developer/design/teeu.md:31
msgid "LibOS: Occlum"
msgstr ""

#: ../../developer/design/teeu.md:32
msgid ""
"In the native SGX programming model, applications are divided into "
"trusted (enclave) and untrusted parts. For security reasons, enclaves are"
" not allowed to directly execute system calls. This means that for an "
"application to run on SGX, the original code needs to be divided into "
"trusted and untrusted parts, and the trusted part cannot make system "
"calls. Although SGX provides a dedicated SDK to help developers write SGX"
" programs, it is still a big burden to migrate existing applications to "
"run on SGX, because most of the existing applications cannot be run "
"directly and need to be modified more or less. It may even be difficult "
"to change successfully."
msgstr ""
"在原生SGX编程模型中，应用被分为可信（enclave）和不可信两部分，出于安全原因，Enclave内部不允许直接执行系统调用。这意味一个应用程序要跑在"
" SGX "
"上，需要对原始的代码划分为可信和不可信部分，其中可信部分不能进行系统调用。虽然SGX提供了专用的sdk帮助开发者编写SGX程序，但是迁移已有应用跑在SGX上依然有很大的负担，因为大部分已有的应用无法直接运行，需要做或多或少的修改，甚至可能很难改动成功。"

#: ../../developer/design/teeu.md:34
msgid ""
"Based on the above background, LibOS is used to run applications on SGX. "
"LibOS (Library OS) provides some capabilities of the system kernel (such "
"as file I/O, network communication) to applications in the form of "
"libraries. Applications run in enclave with LibOS as backend. This allows"
" existing applications to run on SGX with little or no modification. "
"Currently, relatively mature LibOS are [Occlum]( "
"https://github.com/occlum/occlum ), [Gramine]( "
"https://github.com/gramineproject /gramine ) etc. SecretFlow chooses "
"Occlum as the base LibOS."
msgstr ""
"基于上述背景，一些LibOS被用于在SGX上运行应用。LibOS（Library "
"OS）将系统内核的部分能力（比如文件I/O、网络通信）以库的形式提供给应用程序，应用程序运行在LibOS上，而LibOS作为SGX的应用程序运行在SGX机器上，从而让已有的应用在很少或者几乎无修改的情况下运行在SGX上。目前比较成熟的"
" LibOS 有 "
"[Occlum](https://github.com/occlum/occlum)、[Gramine](https://github.com/gramineproject/gramine)等。目前隐语选择"
" occlum 作为运行 SGX 的底座 LibOS。"

#: ../../developer/design/teeu.md:36
msgid ""
"TEE provides a good security model and supports large-scale high-"
"performance computing, which is one of the indispensable routes for "
"privacy-preserving computing. However, TEE still has the problem of high "
"difficulty in getting started, and its ease of use has not been as simple"
" and easy to use as non-TEE. In order to provide users with easier-to-use"
" TEE capabilities, as well as basic privacy-preserving computing "
"capabilities, SecretFlow has incorporated TEE into the technical route "
"from the beginning of the design, providing TEE device as the basic "
"device for mixed plaintext and ciphertext programming."
msgstr ""
"TEE "
"提供了良好的安全模型，并且支持大规模高性能计算，是目前隐私保护计算不可或缺的路线之一。但是TEE目前依然存在上手难度较高的问题，其易用性还没有做到和非"
" TEE 一样简单易用。为了给用户提供更易用的 TEE 能力，同时也作为基础的隐私保护计算能力，隐语从设计伊始就把 TEE 纳入了技术路线，提供 "
"TEE 设备——TEEU 作为明密文混合编程的基础设备。"

#: ../../developer/design/teeu.md:38
msgid ""
"TEE processing Unit(TEEU) is one kind of devices in ciphertext state, "
"which is designed to run python programs. Users can encrypt data and send"
" it to TEEU through the interface provided by SecretFlow, so that TEEU "
"can perform secure calculations on data in TEE. By shielding the "
"underlying details (such as remote attestation, data encryption and "
"transmission), and providing data access authorization control semantics,"
" TEEU makes it as simple as possible for users to use TEE without "
"reducing its security."
msgstr ""
"TEEU(TEE processing Unit)属于隐语密态设备的一种。TEEU 被设计为可以在 TEE上 运行 python 程序，用户通过 "
"SecretFlow 提供的接口，可以把数据加密发送给 TEEU，从而可以让 TEEU 在 TEE 内对数据进行安全计算。TEEU "
"通过屏蔽底层细节（比如远程认证、数据加密和传输），并且提供数据访问授权控制语义，让用户使用 TEE 尽量简单，同时不降低其安全性。"

#: ../../developer/design/teeu.md:40
msgid ""
"It should be noted that currently the data sent by the user to the TEEU "
"is encrypted and only decrypted inside the TEEU for calculation, **but "
"the final calculation result is output in plaintext.** Therefore, when "
"using TEEU for calculation, please make sure that the plaintext of the "
"calculation result is acceptable to you, otherwise it is recommended to "
"use it with caution. The security and access control of calculation "
"results will be added in subsequent versions, please continue to pay "
"attention to our updates."
msgstr ""
"需要注意，目前用户发送给TEEU的数据是加密的，仅在TEEU内部解密进行计算，但是最终计算的结果是明文输出的。因此目前使用 TEEU "
"进行计算时，请确保计算结果明文是对您是可以接受的，否则建议审慎使用。计算结果的安全性和访问控制会在后续版本中添加，欢迎持续关注我们的更新。"

#: ../../developer/design/teeu.md:41
msgid "Overall Architecture"
msgstr "整体架构"

#: ../../developer/design/teeu.md:42
msgid ""
"The following figure shows the overall architecture and links of TEEU, "
"taking Alice and Bob to use TEEU for integrated security computing as an "
"example. The figure describes that Alice and Bob send their respective "
"data to TEEU, and authorize TEEU to perform specified calculations on the"
" data (python code). Its general process can be described as:"
msgstr ""
"下图以 Alice 和 Bob 使用 TEEU 进行融合安全计算为例，展示了 TEEU 的整体架构和链路。该图表述了 Alice 和 Bob "
"把各自的数据发送给 TEEU，并且授权 TEEU 对数据进行指定的计算（python 代码）。其大致的流程可以描述为："

#: ../../developer/design/teeu.md:44
msgid ""
"The data of Alice/Bob will be sent to TEEU in encrypted form to ensure "
"data security."
msgstr "Alice/Bob的数据会以加密的形式发送给TEEU，以确保数据安全。"

#: ../../developer/design/teeu.md:45
msgid ""
"The data encryption key of Alice/Bob is hosted by Authority "
"Manager(AuthManager), which is an application running in TEE and provides"
" data access control services. In addition to providing the data "
"encryption key to the Authority Manager, Alice/Bob will also attach the "
"TEEU identity (MRENCLAVE) that can access the data and the calculation "
"logic (python code) that allows execution."
msgstr ""
"Alice/Bob 的数据加密秘钥由 Authority Manager 托管，AuthoriyManager "
"是运行在TEE内的一个应用，提供数据访问控制服务。Alice/Bob 除了向 Authority Manager "
"提供数据加密秘钥外，还会附带可以访问数据的TEEU身份标识（MRENCLAVE）以及允许执行的计算逻辑（python 代码）。"

#: ../../developer/design/teeu.md:46
msgid ""
"Before TEEU executes the python code, it will access the Authority "
"Manager to obtain the data key and the python code signature that the "
"data is allowed to execute. Only when the received python code is "
"consistent with the authorized python code, TEEU will finally execute the"
" python code."
msgstr ""
"TEEU 执行 python 代码之前，会访问 Authority Manager 获取数据秘钥，以及数据被允许执行的 python "
"代码签名。只有收到的 python 代码和授权允许的 python 代码一致时，TEEU 才会最终执行 python 代码。"

#: ../../developer/design/teeu.md:48
msgid ""
"In the above process, each step is based on the remote attestation "
"mechanism of SGX, and the running Authority Manager and TEEU are "
"authenticated to ensure security, which will be introduced in detail "
"later."
msgstr ""
"上述流程中，每一步都基于SGX的远程认证机制，对运行的 Authority Manager 和 TEEU "
"进行了认证，从而确保安全性，后文会详细介绍。"

#: ../../developer/design/teeu.md:50
msgid "![teeu]( ./resources/teeu.png )"
msgstr ""

#: ../../developer/design/teeu.md:50
msgid "teeu"
msgstr ""

#: ../../developer/design/teeu.md:52
msgid "Principle Introduction"
msgstr "原理介绍"

#: ../../developer/design/teeu.md:53
msgid "The figure below is a detailed description of TEEU."
msgstr "下图为 TEEU 的详细描述。"

#: ../../developer/design/teeu.md:55
msgid "![teeu_detail]( ./resources/teeu_detail.png )"
msgstr ""

#: ../../developer/design/teeu.md:55
msgid "teeu_detail"
msgstr ""

#: ../../developer/design/teeu.md:57
msgid "We will explain the above flow in detail using a sequence diagram."
msgstr "我们将使用序列图详细解释上述流程。"

#: ../../developer/design/teeu.md:59
msgid "![teeu_sequence]( ./resources/teeu_sequence.svg )"
msgstr ""

#: ../../developer/design/teeu.md:59
msgid "teeu_sequence"
msgstr ""

#: ../../developer/design/teeu.md:61
msgid "init"
msgstr ""

#: ../../developer/design/teeu.md:63
msgid ""
"Alice and Bob each hold a pair of public and private keys, and the secure"
" measurement (MRENCLAVE) of AuthManager and TEEU can be calculated "
"through the source code."
msgstr "Alice 和 Bob 各自持有一对公私密钥，AuthManager 以及 TEEU 的安全度量值（MRENCLAVE）可以通过源码计算得到。"

#: ../../developer/design/teeu.md:65
msgid ""
"In the initialization phase, AuthManager will generate a pair of public "
"and private keys (0.1) at startup; Alice/Bob will inject the public key "
"into AuthManager (0.2-0.3), which will be used by AuthManager to verify "
"the signature of data authorization; Alice/Bob will obtain the public key"
" of AuthManager through remote attestation(0.4-0.5)."
msgstr ""
"在初始化阶段, AuthManager 会在启动时生成一对公私密钥（0.1）；Alice，Bob 会将公钥信息注入 "
"AuthManager（0.2-0.3), 用于 AuthManager 对数据授权签名的验证，Alice/Bob 通过远程认证获取 "
"AuthManager 的公钥（0.4-0.5）。"

#: ../../developer/design/teeu.md:67
msgid "x.to(teeu)"
msgstr ""

#: ../../developer/design/teeu.md:69
msgid "1.1. Data preparation"
msgstr "1.1. 数据准备（Data preparation）"

#: ../../developer/design/teeu.md:71
msgid ""
"(1) Randomly generate encrypted data key dk_x and data identifier "
"id_x;<br> (2) Use dk_x to encrypt data x to obtain encrypted data: e_x = "
"Enc(dk_x, x);<br> (3) Use pk_auth to encrypt dk_x: k_x = Enc(pk_auth, "
"dk_x);<br> (4) Calculate the signature: sig_x = Sig(sk_a, id_x || "
"dk_x);<br> (5) Generate data authorization: auth_x = {id_x, foo, "
"mr_enclave_teeu};<br> (6) Sign the authorization information: sig_auth_x "
"= Sig(sk_a, auth_x)"
msgstr ""
"(1) 随机生成加密数据密钥 dk_x 以及数据标识 id_x；<br> (2) 使用 dk_x 加密数据 x to 得到加密数据 e_x = "
"Enc(dk_x, x)；<br> (3) 使用 pk_auth 对 dk_x 进行加密 k_x = Enc(pk_auth, "
"dk_x)；<br> (4) 计算签名 sig_x = Sig(sk_a, id_x || dk_x)；<br> (5) 生成数据授权 "
"auth_x = {id_x, foo, mr_enclave_teeu}；<br> (6) 对授权信息签名 sig_auth_x = "
"Sig(sk_a, auth_x)"

#: ../../developer/design/teeu.md:79
msgid "1.2 Send k_x, sig_x, auth_x, sig_auth_x to AuthManager"
msgstr "1.2 将 k_x, sig_x, auth_x, sig_auth_x 发送至 AuthManager"

#: ../../developer/design/teeu.md:81
msgid "1.3 Send id_x and encrypted data e_x to TEEU"
msgstr "1.3 将 id_x 以及加密数据 e_x 发送至 TEEU"

#: ../../developer/design/teeu.md:83
msgid "y.to(teeu)"
msgstr ""

#: ../../developer/design/teeu.md:85
msgid "The process is similar to **x.to(teeu)** (2.1-2.3)"
msgstr "与 **x.to(teeu)** 执行操作一致（2.1-2.3）"

#: ../../developer/design/teeu.md:87
msgid "teeu(foo)(x, y)"
msgstr ""

#: ../../developer/design/teeu.md:89
msgid ""
"3.1. TEEU randomly generates a temporary public-private key (pk_tmp, "
"sk_tmp), which is used as a temporary key for subsequent communication "
"with AuthManager."
msgstr "3.1. TEEU 随机生成临时公私钥（pk_tmp, sk_tmp），这对公私钥作为后续与 AuthManager 通信的临时密钥。"

#: ../../developer/design/teeu.md:91
msgid ""
"3.2. TEEU generates a remote attestation report `ra_report`, the user-"
"defined field `ra_report.user_data` in the report is set to SHA256(pk_tmp"
" || SHA256(foo) || id_x || id_y)."
msgstr ""
"3.2. TEEU 生成远程认证报告 `ra_report`, 其中用户自定义字段 `ra_report.user_data` 设置为 "
"SHA256(pk_tmp || SHA256(foo) || id_x || id_y)。"

#: ../../developer/design/teeu.md:93
msgid ""
"3.3. TEEU sends the report `ra_report`, the randomly generated public key"
" `pk_tmp`, the hash of the function to be executed `SHA256(foo)`, and the"
" ID of encrypted data x, y (`id_x`, `id_y`) to AuthManager to request the"
" decryption key of x, y."
msgstr ""
"3.3. TEEU 将 `ra_report`，随机生成的公钥 `pk_tmp`，待执行的函数哈希 `SHA256(foo)` 以及加密数据 "
"x，y 的 ID 发送给 AuthManager，用于请求 x，y 的解密密钥。"

#: ../../developer/design/teeu.md:95
msgid ""
"3.4. AuthManager will verify whether the report and the hash  of the "
"function to be executed satisfy the authorization information of x, y "
"(see `AuthVerify` for the verification process)."
msgstr "3.4 AuthManager 会验证 report 以及待执行函数的哈希值是否满足 x, y 的授权信息（验证流程见 `AuthVerify`)"

#: ../../developer/design/teeu.md:97
msgid ""
"AuthVerify<br> (1) According to id_x, the following information k_x, "
"sig_x, auth_x, sig_auth_x, pk_a are found.<br> (2) Use sk_auth to decrypt"
" k_x to get dk_x.<br> (3) Use pk_a to verify the signature, "
"SigVerify(pk_a, sig_x, id_x || dk_x).<br> (4) Use pk_a to verify the "
"signature, SigVerify(pk_a, sig_auth_x, auth_x), the combination of this "
"step and step (3) can show that the authorization information is "
"generated by Alice, not forged, because only Alice knows dk_x.<br> (5) "
"Verify that foo is in auth_x.<br> (6) Verify ra_report and confirm "
"whether ra_report.mr_enclave is in auth_x.<br> (7) Repeat operations "
"(1)-(6) for id_y.<br>"
msgstr ""
"AuthVerify<br> (1) 根据 id_x, 查询到以下信息 k_x, sig_x, auth_x, sig_auth_x, "
"pk_a。<br> (2) 使用 sk_auth 解密 k_x 得到 dk_x.<br> (3) 使用 pk_a 验证签名, "
"SigVerify(pk_a, sig_x, id_x || dk_x).<br> (4) 使用 pk_a 验证签名, "
"SigVerify(pk_a, sig_auth_x, auth_x), 这一步和第（3）步结合起来可以说明授权信息是由 Alice "
"生成的，而不是伪造的，因为只有 Alice 才知道 dk_x。<br> (5) 验证 foo 是否在 auth_x 内.<br> (6) 验证 "
"ra_report 并确认 ra_report.mr_enclave 是否在 auth_x 内。<br> (7) 对 id_y 重复 "
"(1)-(6)的操作。"

#: ../../developer/design/teeu.md:106
msgid ""
"3.5. After the AuthManager passes the verification, encrypt and transmit "
"dk_x, dk_y to TEEU with pk_tmp."
msgstr "3.5. AuthManager 验证通过后， 将 dk_x, dk_y 用 pk_tmp 加密传输给 TEEU。"

#: ../../developer/design/teeu.md:108
msgid "3.6. TEEU decrypts x & y, execute the function: r = foo(x, y)."
msgstr "3.6. TEEU解密 x & y, 执行 r = foo(x, y)。"

#: ../../developer/design/teeu.md:109
msgid "Module Introduction"
msgstr "模块介绍"

#: ../../developer/design/teeu.md:110
msgid "AuthManager"
msgstr ""

#: ../../developer/design/teeu.md:111
msgid ""
"How to protect user data privacy while using data reasonably? Usually "
"start from two aspects:"
msgstr "如何保护用户数据隐私的同时又合理使用数据？通常从两方面出发："

#: ../../developer/design/teeu.md:112
msgid ""
"The calculation of data is all run in the TEE environment to ensure "
"privacy."
msgstr "数据的计算全部都在TEE环境中运行，保证隐私性。"

#: ../../developer/design/teeu.md:113
msgid ""
"The user who uploads the data authorizes the data to ensure that only "
"operators that meet the authorization semantics in the TEE environment "
"can use the data."
msgstr "上传数据的用户对数据进行授权，保证TEE环境中只有符合授权语义的算子才能使用该份数据。"

#: ../../developer/design/teeu.md:115
msgid ""
"AuthManager is just to solve data authorization, it has the following "
"characteristics:"
msgstr "AuthManager 正是为了解决数据的授权，它有以下几个特点："

#: ../../developer/design/teeu.md:116
msgid ""
"Run in the TEE environment, and the user who uploads the data performs "
"remote attestation to ensure that the AuthManager has no malicious "
"behavior."
msgstr "在TEE环境中运行，由上传数据的用户（PYU）进行远程验证，保证 AuthManager 没有恶意行为"

#: ../../developer/design/teeu.md:117
msgid ""
"Network communication uses signatures or mac, digital envelopes, etc. to "
"prevent communication data from being tampered with, and supports mtls "
"communication."
msgstr "网络通信采用签名或者 mac、数字信封等方式防止通信数据被篡改，支持 mtls 通信"

#: ../../developer/design/teeu.md:118
msgid "Flexible authorization semantics"
msgstr "灵活的授权语义"

#: ../../developer/design/teeu.md:119
msgid ""
"The data encryption key (data key) and meta-information are managed by "
"AuthManager. TEEU must communicate with AuthManager to verify "
"authorization to obtain the key, ensuring that the authorization "
"semantics cannot be bypassed"
msgstr ""
"数据的加密秘钥（data key）与元信息由 AuthManager 管理，TEEU 必须与 AuthManager "
"通信验证授权才能获取秘钥，保证授权语义无法被绕过"

#: ../../developer/design/teeu.md:121
msgid ""
"See [AuthManager]( https://github.com/SecretFlow/authmanager ) for the "
"code of AuthManager."
msgstr "AuthManager的代码参见[AuthManager](https://github.com/secretflow/authmanager)。"

#: ../../developer/design/teeu.md:122
msgid "Term"
msgstr "术语"

#: ../../developer/design/teeu.md:123
msgid ""
"Institution (institution id): The user side that uploads data, in this "
"case PYU."
msgstr "机构（institution id）：上传数据的用户方，此处为 PYU"

#: ../../developer/design/teeu.md:125
msgid ""
"Authorized application (application): A complete program, here is TEEU, "
"usually measured by mr_enclave."
msgstr "授权应用（application）：一个完整的程序，此处为 TEEU，通常用 mr_enclave 来度量"

#: ../../developer/design/teeu.md:127
msgid ""
"Authorization function (func): The function actually executed in the "
"program, here is the python code executed by TEEU."
msgstr "授权函数（func）：程序中实际执行的函数，此处为 TEEU 执行的 python 代码"

#: ../../developer/design/teeu.md:128
msgid "Secure communication"
msgstr "安全通信"

#: ../../developer/design/teeu.md:129
msgid ""
"Digital envelope: AuthManager self-generates public and private keys, PYU"
" uses the public key to encrypt data, and AuthManager uses the private "
"key to decrypt data. In order to prevent the public key from being "
"tampered with, the report data returned by AuthManager to RA contains "
"public key information, and the public key is guaranteed to be correct "
"through the TEE mechanism."
msgstr ""
"数字信封：AuthManager 自生成公私钥，PYU 使用公钥加密数据，AuthManager "
"使用私钥解密数据，为了防止公钥被篡改，AuthManager 返回给 RA 的 report 数据中包含公钥信息，通过 TEE 机制保证公钥正确"

#: ../../developer/design/teeu.md:131
msgid ""
"mtls communication: an optional function, which requires AuthManager and "
"PYU to generate certificates before it can be used normally"
msgstr "mtls 通信：可选功能，需 AuthManager 与 PYU 生成证书才可正常使用"

#: ../../developer/design/teeu.md:132
msgid "Authorization Semantics"
msgstr "授权语义"

#: ../../developer/design/teeu.md:133
msgid ""
"Granularity: authorization institution id + authorization application app"
" (mr_enclave) + authorization function func (stateless)"
msgstr "粒度：授权机构institution id + 授权应用app（mr_enclave）+ 授权函数func（无状态）"

#: ../../developer/design/teeu.md:135
msgid ""
"Since AuthManager is here to authorize for TEEU, TEEU is not an "
"institution, so the authorization semantics here are: authorization "
"application app (mr_enclave) + authorization function func (stateless)"
msgstr ""
"由于 AuthManager 在此处是为 TEEU 进行授权，TEEU 不是机构，因而此处的授权语义是：授权应用 app（mr_enclave） "
"+ 授权函数 func（无状态）"

#: ../../developer/design/teeu.md:136
msgid "Storage Model"
msgstr "存储模型"

#: ../../developer/design/teeu.md:137
msgid ""
"Provides the abstraction of the storage storage layer, currently supports"
" inmemory and remote"
msgstr "提供了 storage 存储层的抽象，目前支持 inmemory 和 remote 两种"

#: ../../developer/design/teeu.md:138
msgid ""
"inmemory: memory storage, no persistence function, encrypted by TEE "
"memory mechanism to prevent leakage"
msgstr "inmemory：内存存储，没有持久化功能，通过 TEE 内存机制加密防止泄露"

#: ../../developer/design/teeu.md:139
msgid ""
"remote: remote storage, persistent, http service access (but you need to "
"deploy storage services yourself), all data needs to be encrypted before "
"storing to prevent leakage"
msgstr "remote：远程存储，可持久化，http 服务访问（但需要自行部署存储服务），数据都需要加密后再存储防止泄露"

#: ../../developer/design/teeu.md:141
msgid ""
"Here TEEU refers to the SGX program that actually executes the python "
"code. TEEU runs in Occlum as an actor of ray, and its core function is to"
" execute python code under the condition of guaranteeing compliance with "
"authorization semantics. The workflow of TEEU is relatively simple, "
"mainly including:"
msgstr ""
"此处 TEEU 指实际执行 python 代码的 SGX 程序。TEEU 作为 ray 的一个 actor 在 Occlum "
"内运行，其核心作用是在保证符合授权语义的情况下执行 python 代码。TEEU 的工作流程比较简单，主要包括："

#: ../../developer/design/teeu.md:144
msgid "Receive the python method and related parameters provided by the user."
msgstr "接收用户提供的python方法以及相关参数。"

#: ../../developer/design/teeu.md:145
msgid ""
"According to the authorization semantics of AuthManager, request the "
"encryption key of parameter data from AuthManager. If the relevant data "
"is not authorized for use by the corresponding code, the acquisition will"
" fail."
msgstr "按照AuthManager的授权语义，向AuthManager请求参数数据的加密秘钥。若相关数据并未授权给对应的代码使用，则获取失败。"

#: ../../developer/design/teeu.md:146
msgid ""
"Use the data key to decrypt the data and obtain the plaintext of the "
"data, and execute the python method."
msgstr "使用数据秘钥对数据解密后获取数据明文，并执行python方法。"

#: ../../developer/design/teeu.md:148
msgid ""
"Because TEEU runs as an SGX program, data security during execution can "
"be ensured. At the same time, users can remotely authenticate TEEU to "
"ensure that the TEEU code has not been tampered with."
msgstr "因为TEEU作为SGX程序运行，所以可以确保执行过程中的数据安全。与此同时用户可以对TEEU进行远程认证，从而确保TEEU代码没有被篡改。"

#: ../../developer/design/teeu.md:149
msgid "Limitations"
msgstr "局限性说明"

#: ../../developer/design/teeu.md:150
msgid ""
"Currently, SecretFlow uses Occlum as the base LibOS，which supports "
"python3.8 and supports running some common python libraries, but there "
"are still some python libraries that cannot run in Occlum. For example, "
"some programs cannot be run directly without modification, or use system "
"calls/kernel functions that Occlum does not support for the time being."
msgstr "目前SecretFlow使用occlum作为基础的LibOS，occlum支持python3.8并且支持运行一些常见的python库，但是仍然有部分python库无法在occlum里运行。比如有些程序在没有修改的情况下无法直接运行，或者使用到了occlum暂时不支持的系统调用/内核功能等。"

#: ../../developer/design/teeu.md:152
msgid ""
"In addition, since Occlum does not support virtual memory at present, for"
" the program, all the requested memory will be regarded as the actual "
"used memory, so the performance of the program running in Occlum may be "
"different from that in the ordinary OS, such as the memory usage will "
"increase significantly."
msgstr "另外，由于目前occlum尚不支持虚拟内存，对于程序来说，所有申请的内存均会被视作实际使用内存，因此程序在occlum里运行的表现可能和在普通OS不太一样，比如占用内存会很大。"

#: ../../developer/design/teeu.md:154
msgid ""
"If you encounter an error during operation, you can contact us through "
"issue."
msgstr "如果您在运行中遇到报错，可以通过issue联系我们。"

#: ../../developer/design/teeu.md:155
msgid "Explanation of sample code"
msgstr "示例代码讲解 "

#: ../../developer/design/teeu.md:156
msgid ""
"In this section, we combine the demo code to explain what happens behind "
"TEEU. The demo code is as follows (how to run the demo code can refer to "
"[teeu quick start]( ../../tutorial/teeu.md ))."
msgstr "本小节我们结合demo代码来讲解TEEU背后发生的事情，demo代码如下（如何运行demo代码可以参考[teeu快速上手](../../tutorial/teeu.md)）。"

#: ../../developer/design/teeu.md:180
msgid "Lines 7-8 construct PYU instances of two participants, Alice and Bob."
msgstr "第7~8行构造了两个参与方Alice和Bob的PYU实例。"

#: ../../developer/design/teeu.md:181
msgid ""
"Line 10 constructs an instance of TEEU, which is held by the participant "
"carol."
msgstr "第10行构造了TEEU的实例，TEEU有参与方carol持有。"

#: ../../developer/design/teeu.md:182
msgid ""
"Lines 12-13 Alice and Bob respectively generate a random numpy array, "
"where the random generation occurs locally in Alice and Bob respectively."
msgstr "第12-13行Alice和Bob分别生成了一个随机numpy array，这里的随机生成分别发生在Alice和Bob本地。"

#: ../../developer/design/teeu.md:183
msgid ""
"In lines 15-16, Alice and Bob respectively send their respective numpy "
"arrays to teeu through the `to` method, allowing them to execute the "
"average method. This step does the following:"
msgstr ""
"第15~16行Alice和Bob分别把通过`to`方法把各自的numpy "
"array发送给teeu，允许对其执行average方法。这一步做了以下事情："

#: ../../developer/design/teeu.md:184
msgid "Data encryption"
msgstr "数据加密"

#: ../../developer/design/teeu.md:185
msgid "Randomly generate encrypted data key and data id."
msgstr "随机生成加密数据密钥和数据id。"

#: ../../developer/design/teeu.md:186
msgid "Use the key to encrypt the data to obtain the data ciphertext."
msgstr "使用密钥加密数据，得到数据密文。"

#: ../../developer/design/teeu.md:187
msgid ""
"Use the private key to sign the data ciphertext, data id, etc. (use the "
"private key of Alice/Bob)"
msgstr "使用私钥对数据密文、数据id等进行签名（使用Alice/Bob的私钥）"

#: ../../developer/design/teeu.md:188
msgid "Authorization"
msgstr "授权"

#: ../../developer/design/teeu.md:189
msgid ""
"Generate authorization information, including data id, average method, "
"TEEU measurement value (mr_enclave), etc."
msgstr "生成授权信息，包括数据id、average方法、TEEU的度量值（mr_enclave）等"

#: ../../developer/design/teeu.md:190
msgid "Sign the authorization information (using Alice/Bob's private key)"
msgstr "对授权信息进行签名（使用Alice/Bob的私钥）"

#: ../../developer/design/teeu.md:191
msgid "Perform remote attestation on AuthManager"
msgstr "对AuthManager进行远程认证"

#: ../../developer/design/teeu.md:192
msgid ""
"Obtain the remote attestation report of AuthManager and verify it to "
"ensure that AuthManager is running in a real and trusted SGX environment "
"and the code has not been tampered with."
msgstr "通过远程认证，用户可以确保enclave运行环境是可靠的，且运行的代码未被篡改。"

#: ../../developer/design/teeu.md:193
msgid ""
"Use the public key of AuthManager to encrypt and protect the data "
"encryption key, authorization information, etc., and then send it to "
"AuthManager"
msgstr "使用AuthManager的公钥对数据加密秘钥、授权信息等进行加密保护，并附带然后发送给AuthManager"

#: ../../developer/design/teeu.md:194
msgid "Send the data ciphertext and data id to TEEU."
msgstr "把数据密文和数据id发送给TEEU。"

#: ../../developer/design/teeu.md:195
msgid ""
"On line 17, TEEU executes the average method, and the input parameter is "
"a list composed of the numpy arrays of Alice and Bob. This step does the "
"following:"
msgstr "第17行 TEEU 执行 average 方法，入参为Alice和Bob的numpy array构成的列表。这一步做了以下事情："

#: ../../developer/design/teeu.md:196
msgid ""
"TEEU temporarily randomly generates a pair of public and private keys, "
"and generates its own remote attestation report, and the public key is "
"attached to the report."
msgstr "TEEU临时随机生成一对公私钥，并且生成自己的远程认证报告，公钥附带在报告中。"

#: ../../developer/design/teeu.md:197
msgid ""
"TEEU sends Report, average method, and data id corresponding to numpy "
"array to AuthManager, requesting to obtain the data decryption key."
msgstr "TEEU将 Report、average方法、numpy array对应的数据id发送给 AuthManager，请求获取数据解密密钥。"

#: ../../developer/design/teeu.md:198
msgid "AuthManager performs authorization check:"
msgstr "AuthManager进行授权检查："

#: ../../developer/design/teeu.md:199
msgid ""
"First verify the report of the TEEU, and check that its metric value is "
"consistent with the metric value in the authorization information."
msgstr "首先验证TEEU的Report，检查其度量值和授权信息中的度量值一致。"

#: ../../developer/design/teeu.md:200
msgid ""
"Check that the average method is consistent with the method in the "
"authorization information."
msgstr "检查average方法和授权信息中的方法一致。"

#: ../../developer/design/teeu.md:201
msgid ""
"After the above two checks are passed, the data decryption key is "
"encrypted with the public key of TEEU and returned to TEEU"
msgstr "上面两部检查均通过后，则将数据解密密钥使用TEEU的公钥进行加密，并返回给TEEU"

#: ../../developer/design/teeu.md:202
msgid ""
"TEEU uses the decryption key to decrypt the numpy array to obtain the "
"plaintext, and executes the average method to obtain the average value "
"after aggregation."
msgstr "TEEU使用解密密钥对numpy array进行解密，得到明文，并执行average方法，求得聚合后的平均值。"

#: ../../developer/design/teeu.md:203
msgid "TEEU sends the execution result to Alice and Bob."
msgstr "TEEU将执行结果发送给Alice和Bob。"

#: ../../developer/design/teeu.md:205
msgid "How to install and use new python libraries in Occlum"
msgstr "如何在 Occlum 中安装和使用新的 python 库"

#: ../../developer/design/teeu.md:206
msgid ""
"Currently, the TEE image provided by SecretFlow has some built-in python "
"libraries, such as numpy. If you need to use other libraries that are not"
" built-in, you need to install them before using them. Methods as below."
msgstr ""
"目前 SecretFlow 提供的 TEE 镜像内置了部分 python 库，比如 "
"numpy。如果您需要使用到其他没有内置的库，则需要先安装才能使用。方法如下"

#: ../../developer/design/teeu.md:207
msgid "Start the container"
msgstr "启动容器"

#: ../../developer/design/teeu.md:211
msgid "Install the python package"
msgstr "安装python包"

#: ../../developer/design/teeu.md:216
msgid "Run the code"
msgstr "运行代码"

#: ../../developer/design/teeu.md:218
msgid ""
"You need to do occlum build, get new mr_enclave, and run your script. For"
" details, please refer to the previous "
"[tutorial](../../tutorial/teeu.md)."
msgstr "您需要执行occlum build，获取新的mr_enclave，并运行您的脚本。具体可以参考前面的教程。提示："

#: ../../developer/design/teeu.md:220
msgid "Hint:"
msgstr "提醒："

#: ../../developer/design/teeu.md:221
msgid ""
"/root/occlum_instance/images is the top-level root directory when occlum "
"is actually running. Your custom script is recommended to be placed under"
" /root/occlum_instance/images/root/. When actually running (executing the"
" occlum run command), the path of the script must be Fill in as `occlum "
"run /bin/python /root/your_script.py`"
msgstr ""
"/root/occlum_instance/images是occlum实际运行时的顶级根目录，您的自定义脚本建议放在 "
"/root/occlum_instance/images/root/下面，实际运行（执行occlum "
"run命令）时，脚本的路径必须填写为`occlum run /bin/python /root/your_script.py`"

#: ../../developer/design/teeu.md:222
msgid ""
"The new python program may take up more memory. If you encounter errors "
"such as insufficient memory, you can try to expand the memory "
"configuration. The configuration file is "
"/root/occlum_instance/Occlum.json. Usually you only need to adjust "
"`user_space_size` by one greater value."
msgstr ""
"新的 python "
"程序可能会占用更多的内存，如果您遇到内存不足等报错，可以尝试扩大内存配置，配置文件为/root/occlum_instance/Occlum.json，通常您只需要把`user_space_size`调整一个更大的值。"

#: ../../developer/design/teeu.md:223
msgid ""
"Every time you modify the content of the script or configuration file, "
"you must first execute occlum build -f to ensure it takes effect, please "
"pay attention."
msgstr "每次修改了脚本或者配置文件的内容，都必须先执行 `occlum build -f` 才能确保生效，请一定注意"

#: ../../developer/design/teeu.md:225
msgid "Roadmap"
msgstr "路线图"

#: ../../developer/design/teeu.md:227
msgid "[TrustedFlow](https://www.secretflow.org.cn/docs/trustedflow/advanced_topic/roadmap.html)"
msgstr ""

