# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Ant Group Co., Ltd.
# This file is distributed under the same license as the SecretFlow package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: SecretFlow \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-07 14:26+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../developer/design/programming_in_secretflow.md:1
msgid "Programming in SecretFlow"
msgstr "隐语的编程思想"

#: ../../developer/design/programming_in_secretflow.md:3
msgid "Single-controller vs Multi-controller"
msgstr "单控制器和多控制器模式"

#: ../../developer/design/programming_in_secretflow.md:4
msgid ""
"Secretflow aims to provide privacy-preserving machine learning and data "
"analysis. The scenarios it faces are naturally across-silo distributed. "
"Providing an efficient and concise programming model is one of the main "
"challenges SecretFlow faces."
msgstr "隐语旨在提供隐私保护机器学习和数据分析，面临的场景天然是跨机构分布式的。面对跨机构分布式场景，如何提供高效简洁的编程模式是隐语面临的挑战之一。"

#: ../../developer/design/programming_in_secretflow.md:6
msgid ""
"The two common distributed programming ideas can be mainly classified "
"into two modes."
msgstr "目前常见的两种分布式编程思路可以主要归为两大类。"

#: ../../developer/design/programming_in_secretflow.md:7
msgid ""
"The first mode is what we call multi-controller. That is developers need "
"to write code for each participant separately, usually through MPI "
"semantics (such as all_gather, all_reduce, etc.) to communicate.  Each "
"participant executes its own code to complete the collaborative task. For"
" example, SPU of SecretFlow is such a mode. By the way, multi-controler "
"codes can be written in same code file if the code logics of each "
"participant are almost same (so called homogeneous code)."
msgstr ""
"第一类我们称为多控制器模式。开发者需要为每个参与方分别编写代码，参与方之间通常通过MPI语义（比如 all_gather, all_reduce "
"等）互相通信。每个参与方执行各自的代码来完成合作，比如SPU背后就是这种模式。"
"顺便说一下，多控制器模式也可以把多方代码写在一个代码文件中，前提是多方代码的逻辑基本是一样的（所谓的同构代码）。"

#: ../../developer/design/programming_in_secretflow.md:10
msgid ""
"The second mode is what we call single-controller. That is to say, the "
"developer has a global perspective. The code logic of each participant is"
" written in same code file, and only one copy of the code needs to be "
"run. The task distribution mechanism (such as ray's remote mechanism) is "
"used to uniformly manage the participants' execution logic.  A typical "
"example is ray, which provides a driver perspective with a remote "
"mechanism,  and users can write distributed code from a global "
"perspective."
msgstr "第二类我们称之为单控制器模式。即开发者拥有全局的视角，每个参与方的代码逻辑写在同一份代码中，实际运行时只需要运行这一份代码，通过任务下发机制（比如ray的remote机制）统一管理各参与方的执行逻辑。典型的如ray，ray提供了driver视角配合remote机制，用户可以在全局视角下编写分布式代码。"

#: ../../developer/design/programming_in_secretflow.md:16
msgid ""
"Both modes have their own advantages and disadvantages, and there is no "
"absolute good or bad.  Here are some of our experiences so far:"
msgstr "两种模式各有优劣，并无绝对的好坏之分。下面是目前我们总结到的一些经验。"

#: ../../developer/design/programming_in_secretflow.md:19
msgid "Multi-controller mode"
msgstr "多控制器"

#: ../../developer/design/programming_in_secretflow.md:20
#: ../../developer/design/programming_in_secretflow.md:27
msgid "Advantages"
msgstr "优点"

#: ../../developer/design/programming_in_secretflow.md:21
msgid "Suitable for scenarios where the code logic is homogeneous."
msgstr "适合代码逻辑同构的场景。"

#: ../../developer/design/programming_in_secretflow.md:22
msgid "Participants can review the code and decide whether to execute it."
msgstr "参与方可以审核代码并决定执行与否。"

#: ../../developer/design/programming_in_secretflow.md:23
#: ../../developer/design/programming_in_secretflow.md:30
msgid "Disadvantages"
msgstr "缺点"

#: ../../developer/design/programming_in_secretflow.md:24
msgid ""
"Not friendly to heterogeneous code logic scenarios. Logic is scattered in"
" different code blocks, lacking a global perspective, which may make code"
" hard to read and understand."
msgstr "对代码逻辑异构场景不友好：逻辑分散在不同代码块中，缺乏全局视角，可能导致代码理解难度变高。"

#: ../../developer/design/programming_in_secretflow.md:26
msgid "Single-controller mode"
msgstr "单控制器"

#: ../../developer/design/programming_in_secretflow.md:29
msgid ""
"It is suitable for scenarios with homogeneous and heterogeneous code "
"logic both."
msgstr "同时适合代码逻辑同构和异构的场景。"

#: ../../developer/design/programming_in_secretflow.md:32
msgid ""
"Rely on the code delivery mechanism, which may bring security "
"vulnerabilities. On the one hand, it is difficult for participants to "
"review codes, and on the other hand, it is difficult to prevent malicious"
" code execution."
msgstr "依赖任务下发机制，任务下发机制可能带来安全漏洞，一方面参与方不好审核代码，另一方面恶意代码执行的防范会比较难做到"

#: ../../developer/design/programming_in_secretflow.md:34
msgid ""
"SecretFlow is a mixed programming framework for various scenes, that "
"means homogeneous and heterogeneous code logic exist both. Inspired by "
"ray, SecretFlow uses the single controller mode to write code. However, "
"as mentioned above, the single-controller mode has potential safety "
"hazards, and it is not easy to solve. So the question is, can we take "
"into account both single-controller and multi-controller modes at the "
"same time, and take advantage of each? The answer is yes, this is the "
"programming idea to be discussed below - single controller programming, "
"multi-controller execution."
msgstr "考虑到隐语是一个明密文混合编程框架，代码同构异构的需求同时存在，受到ray的启发，隐语最开始是直接采用单控制器模式来编写代码。但是如上述，单控制器模式存在安全隐患，且不好解决。所以问题来了，我们是否可以同时兼顾单控制器和多控制器模式，各取其优点？答案是可以的，这就是下面要讲的隐语编程思想——单控制器编程，多控制器执行。"

#: ../../developer/design/programming_in_secretflow.md:36
msgid "Multi-controller Execution"
msgstr "多控制器执行"

#: ../../developer/design/programming_in_secretflow.md:37
msgid "The Principle"
msgstr "原理"

#: ../../developer/design/programming_in_secretflow.md:38
msgid ""
"The key idea of multi-controller execution is that each participant runs "
"the same code, but only executes its own part of the code."
msgstr "多控制器执行的核心思路是每个参与方都运行同一份代码，但是仅执行代码中属于自己的部分。"

#: ../../developer/design/programming_in_secretflow.md:40
msgid ""
"If we regard the code logic as a DAG (directed acyclic graph), each node "
"of the DAG represents a piece of code logic belonging to a certain "
"participant, and the edges represent the data flow between different "
"nodes, then the principle of multi-controller execution can be as the "
"picture shows."
msgstr "假如我们把代码逻辑看成一个DAG（有向无环图），DAG的每个节点表示一段属于某个参与方的代码逻辑，边表示不同节点之间的数据流转，则多控制器执行原理可以如图所示。"

#: ../../developer/design/programming_in_secretflow.md:42
msgid ""
"In order to achieve this goal, each node of the DAG is marked with a "
"party. When the code is executed, the party attribute is used to "
"determine the owner of the node and determine whether it needs to be "
"executed."
msgstr "为了达成此目的，DAG的每一个节点都被标记了参与方（party），代码执行时，通过party属性判断节点的归属方，并决定是否需要执行。"

#: ../../developer/design/programming_in_secretflow.md:43
msgid "Situation 1"
msgstr "情形一"

#: ../../developer/design/programming_in_secretflow.md:45
msgid ""
"If the node belongs to the participant, execute the node. If the input "
"dependency of the node comes from other parties, insert the recv node to "
"wait for receiving from other parties."
msgstr "节点属于自己，则执行该节点；若节点的输入依赖来源于其他方，则插入recv节点等待从其他方接收。"

#: ../../developer/design/programming_in_secretflow.md:47
msgid "Situation 2"
msgstr "情形二"

#: ../../developer/design/programming_in_secretflow.md:49
msgid ""
"If the node does not belong to the participant, then judge whether the "
"input dependency of the node comes from itself; if it comes from the "
"participant, insert the send node and send it to the owner of the node."
msgstr "节点不属于自己，则判断节点的输入依赖是否来源于自身；若来源于自身，则插入send节点发送给节点归属方。"

#: ../../developer/design/programming_in_secretflow.md:51
msgid "![mutli controller](./img/multi-controller.png)"
msgstr ""

#: ../../developer/design/programming_in_secretflow.md:51
#: ../../developer/design/programming_in_secretflow.md:134
msgid "mutli controller"
msgstr "多控制器执行"

#: ../../developer/design/programming_in_secretflow.md:53
msgid ""
"In principle, multi-controller execution requires that the control flow "
"of the code be deterministic. When each party executes the same code, it "
"should generate exactly the same DAG. This is a prerequisite for the "
"correct execution of multi-controller mode."
msgstr "多控制器执行原则上要求代码的控制流是确定性的，每一方执行同样代码时，理应生成一模一样的DAG。这是多控制器模式能够正确执行的前提。"

#: ../../developer/design/programming_in_secretflow.md:55
msgid ""
"In order to ensure this, it also brings some requirements to programming,"
" which will be mentioned in detail later."
msgstr "为了确保这一点，对编程带来了一些要求，后文会详细提及。"

#: ../../developer/design/programming_in_secretflow.md:57
msgid "Cross-silo Communication"
msgstr "跨机构通信"

#: ../../developer/design/programming_in_secretflow.md:59
msgid ""
"In the current implementation of cross-sil communication, each node of "
"the DAG will be sequentially marked with a serial number, and send/recv "
"will ensure the correctness of data sending and receiving according to "
"the serial number of the node. This design is mainly to simplify cross-"
"silo communication, but also introduces some restrictions, such as the "
"control flow itself cannot be multi-threaded (otherwise, cross-silo "
"distributed serial number generation will be wrong)."
msgstr "目前跨机构通信的实现中，DAG的每一个节点都会被顺序标注序号，send/recv会根据节点的序号来确保数据的收发正确性。这么设计主要是为了简化跨架构通信，同时也引入了一些限制，比如控制流中本身不能多线程（否则跨机构分布式的序号生成会出错）。"

#: ../../developer/design/programming_in_secretflow.md:61
msgid "Implementation"
msgstr "实现"

#: ../../developer/design/programming_in_secretflow.md:62
msgid "Welcome to [rayfed](https://github.com/ray-project/rayfed)."
msgstr "欢迎访问[rayfed](https://github.com/ray-project/rayfed)阅读相关代码。"

#: ../../developer/design/programming_in_secretflow.md:64
msgid "Instructions"
msgstr "使用方法"

#: ../../developer/design/programming_in_secretflow.md:66
msgid ""
"The usage of multi-controller execution is relatively simple. You only "
"need to provide the communication address of each participant at the time"
" of secretflow.init, and specify the current participant."
msgstr "多控制器执行模式使用方法比较简单，只需要在secretflow.init的时候提供每个机构通信的地址，并指定当前参与方。"

#: ../../developer/design/programming_in_secretflow.md:68
msgid "**Example**"
msgstr "**示例**"

#: ../../developer/design/programming_in_secretflow.md:70
msgid "For the participant alice, the startup code is as follows."
msgstr "对于参与方alice，启动方式如下。"

#: ../../developer/design/programming_in_secretflow.md:89
msgid "Correspondingly, the participant bob starts as follows."
msgstr "对应的，参与方bob启动方式如下。"

#: ../../developer/design/programming_in_secretflow.md:108
msgid "Programming Notes"
msgstr "编程注意事项"

#: ../../developer/design/programming_in_secretflow.md:109
msgid ""
"The multi-controller execution mode implicitly requires that the DAG "
"executed by each party is deterministic, which brings some programming "
"requirements."
msgstr "多控制器执行模式隐式的要求了每一方执行的DAG是相同的，这带来了一些编程上的要求。"

#: ../../developer/design/programming_in_secretflow.md:111
msgid ""
"Avoid uncertainty in the control flow, that is, no matter when and where "
"the control flow is executed, the execution graph generated by it should "
"be consistent."
msgstr "避免控制流中出现不确定性，即控制流无论在何时何地执行，其生成的执行图应该是一致的。"

#: ../../developer/design/programming_in_secretflow.md:112
msgid ""
"We cannot directly generate random numbers in the control flow, or rely "
"on certain environmental factors (such as whether a certain file exists),"
" we need to ensure that the driver code is deterministic. For example, in"
" the control flow of `FLModel`, there is a practice of generating random "
"numbers as seeds. An alternative is to have one party generate a random "
"number and broadcast it to other parties."
msgstr "不能在控制流中直接生成随机数，或者依赖某个环境因素（比如某个文件是否存在），我们需要确保控制流代码是确定性的。比如FLModel的控制流中有生成随机数当种子的做法。一种替代的方式是让某一个参与方生成随机数，然后广播给其他参与方。"

#: ../../developer/design/programming_in_secretflow.md:113
msgid "Unittest"
msgstr "单测"

#: ../../developer/design/programming_in_secretflow.md:115
msgid ""
"There are more cases encountered in the unit tests. At present, multi-"
"process is used to simulate multiple participants in the unit test, but "
"since the code is executed on the same machine, more corner cases will be"
" encountered. E.g."
msgstr "单测中遇到的情况会比较复杂。目前单测中使用多进程模拟多个参与方，但是由于代码是在同一台机器上执行，所以会遇到更多corner case。"

#: ../../developer/design/programming_in_secretflow.md:116
msgid ""
"The driver generates temporary files and then deletes them. Conflicts may"
" occur during multi-process simulation.-> Solution: Let PYU "
"generate/delete files."
msgstr "driver生成临时文件，然后删除。多进程模拟时可能出现冲突 -> 解决办法：让PYU生成/删除文件。"

#: ../../developer/design/programming_in_secretflow.md:117
msgid ""
"The driver generates a random ndarray -> Solution: Let PYU generate and "
"return."
msgstr "driver生成随机ndarray -> 解决办法：让PYU生成然后返回。"

#: ../../developer/design/programming_in_secretflow.md:118
msgid ""
"SecretFlow has some built-in data sets, which will be written to the "
"local cache file when downloaded. Write conflicts will occur during "
"multi-process simulation -> Solution: introduce cross-process file locks."
msgstr "SecretFlow内置了一些数据集，下载的时候会写入本地缓存文件。多进程模拟时会出现写冲突 -> 解决办法：引入跨进程的文件锁。"

#: ../../developer/design/programming_in_secretflow.md:119
msgid ""
"Some unit tests will construct an exception case, and then "
"assertRaiseException. If alice throws an exception during execution, the "
"subsequent nodes of alice will not execute, and bob may not be able to "
"know the exception. -> **To be resolved, rayfed does not yet have the "
"ability to broadcast exceptions.** At present, this kind of case is "
"temporarily commented out."
msgstr ""
"某些单测会构造异常case，然后assertRaiseException。假如alice执行抛异常了，则alice后续的节点不会执行，bob可能捕获不到异常。->"
" **待解决，rayfed暂时还不具有异常广播能力。** 目前临时把这类case注释掉了（个位数）"

#: ../../developer/design/programming_in_secretflow.md:120
msgid ""
"The spu provides a reset method, which will stop the existing spu actor, "
"and then restart it. It is mainly used for some testcases that make an "
"error in constructing the spu and need to clear the state of the spu. Due"
" to the multi-process simulation execution, after the spu actor of one "
"party stops and restarts, the spu actor of the other party may not "
"restart, and then the old spu actor connects the new spu actor "
"unexpectedly. -> **to be resolved** (the number of cases is less than 5)"
msgstr ""
"spu提供了reset方法，会停掉已有的spu "
"actor，然后重新拉起，主要用于某些testcase会构造spu出错，需要清理spu的状态。由于多进程模拟执行，可能某一方的spu "
"actor停止重启后，另一方的spu actor可能还没重启，新旧spu actor连上了。 -> **待解决** （case数量小于5）"

#: ../../developer/design/programming_in_secretflow.md:121
msgid ""
"`sf.remote` does not currently support the decorator mode. It will be "
"added later. Currently, `sf.proxy` can be used to decorate classes."
msgstr " `sf.remote` 暂不支持装饰器模式，后续会支持。目前可以使用 `sf.proxy` 对class进行装饰。"

#: ../../developer/design/programming_in_secretflow.md:124
msgid "Single Controller Execution"
msgstr "单控制器执行"

#: ../../developer/design/programming_in_secretflow.md:125
msgid ""
"Multi-controller execution needs to start multiple ray clusters, and "
"debugging is more difficult than single-controller mode. For the "
"convenience of simulation, SecretFlow still supports single-controller "
"execution mode, that is, users can still use a ray cluster to simulate "
"multiple participants."
msgstr "多控制器执行需要启动多个ray集群，debug也比单控制器模式难。为了方便用户仿真，隐语仍然支持单控制器执行模式，即用户仍然可以使用一个ray集群来模拟多参与方。"

#: ../../developer/design/programming_in_secretflow.md:127
msgid ""
"**The single controller implementation remains unchanged from the "
"original, and the code does not need any modification.**"
msgstr "**单控制器执行和原来没有变化，代码无需任何修改。**"

#: ../../developer/design/programming_in_secretflow.md:129
msgid ""
"The usage the single controller is very simple. You only need to provide "
"the `parties` parameter when `secretflow.init`. For the specific usage "
"method, please refer to "
"[sf.init](../../source/secretflow.device.rst#secretflow.device.driver.init)."
msgstr ""
"单控制器执行使用方式很简单，只需要在secretflow.init的时候，提供 `parties` 参数，具体使用方法可以参考 "
"[sf.init](../../source/secretflow.device.rst#secretflow.device.driver.init)。"

#: ../../developer/design/programming_in_secretflow.md:132
msgid ""
"The bottom layer of SF encapsulates two sets of primitives, ray and "
"rayfed, which are unified into one."
msgstr "SF底层封装了ray和rayfed两套原语，向上统一成一种原语。"

#: ../../developer/design/programming_in_secretflow.md:134
msgid "![mutli controller](./img/primitive.png)"
msgstr ""

