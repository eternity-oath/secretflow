# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Ant Group Co., Ltd.
# This file is distributed under the same license as the SecretFlow package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: SecretFlow \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-09 08:47+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../developer/design/flmodel.md:1
msgid "FLModel Design"
msgstr "FLModel设计文档"

#: ../../developer/design/flmodel.md:2
msgid ""
"FLModel is the logical abstraction of federated learning provided by "
"SecretFlow, and it is also a unified interface for users. FLModel "
"encapsulates various capabilities required under the federated learning "
"framework, including data processing, training strategies, aggregation "
"logic, etc. SecretFlow provides a user-friendly interface, so that users "
"can easily and quickly transfer existing plaintext computing models "
"through the FLModel interface to quickly form federated learning "
"capabilities through simple migration , a joint multi-party establishment"
" of joint models with low learning cost."
msgstr " FLModel是SecretFlow提供的联邦学习的逻辑抽象，也是面向用户的统一接口。FLModel封装了联邦学习框架下需要的各种能力，包括数据处理，训练策略，聚合逻辑等，用户可以通过FLModel接口方便快速的将已有的明文计算模型，通过简单的迁移，快速形成联邦学习能力，低学习成本的联合多方建立联合模型。"

#: ../../developer/design/flmodel.md:3
msgid "Design Principles"
msgstr "设计原则"

#: ../../developer/design/flmodel.md:4
msgid ""
"The federated logic layer provides a lingo user API, provides a unified "
"interface, shields the underlying differences, and simplifies user "
"learning costs"
msgstr "联邦逻辑层提供隐语的用户API，提供统一的接口，屏蔽掉底层差异，简化用户学习成本"

#: ../../developer/design/flmodel.md:5
msgid ""
"The use of the interface conforms to user habits. Users only need to "
"migrate the existing code without modifying the original code."
msgstr "接口使用符合用户习惯，用户仅需迁移已有代码，无需对原有代码进行修改"

#: ../../developer/design/flmodel.md:6
msgid ""
"Parameterized configuration of backend, strategy, sampler and other "
"federated model configurations to simplify user experience"
msgstr "参数化配置后端，strategy，sampler等联邦模型配置，简化用户体验"

#: ../../developer/design/flmodel.md:7
msgid ""
"Supports Torch, Tensorflow multiple backends, and the programming "
"experience of different backends is consistent."
msgstr "支持Torch、Tensorflow多种后端，不同后端的编程体验一致。"

#: ../../developer/design/flmodel.md:8
msgid "Architecture"
msgstr "架构框图"

#: ../../developer/design/flmodel.md:9
msgid ""
"SecretFlow provides the FLModel module from a centralized perspective. "
"The overall logic flow of the federation is choreographed by FLModel. "
"FLModel determines which workers are based on the parameters, and those "
"backends will cooperate to complete the federation calculation. "
"![flmodel](resources/flmodel.jpg)"
msgstr "SecretFlow提供了中心化视角下的FLModel模块，联邦整体流程由FLModel来进行编排，由传入FLModel的参数来决定使用那些worker想会被拉起来进行联邦计算。![flmodel](resources/flmodel.jpg)"

#: ../../developer/design/flmodel.md:9
msgid "flmodel"
msgstr "flmodel"

#: ../../developer/design/flmodel.md:12
msgid "example："
msgstr "example："

#: ../../developer/design/flmodel.md:22
msgid ""
"Tell FLModel through parameters that I want to use alice, bob, and "
"charlie for calculation, where charlie is used as server, the backend "
"uses tensorflow for calculation, and fed_avg_w is used for federated "
"learning strategy."
msgstr "通过参数告诉FLModel，我想使用alice，bob，charlie三方来进行计算，其中charlie用作server，后端使用tensorflow来进行计算，联邦学习策略使用fed_avg_w。"

#: ../../developer/design/flmodel.md:24
msgid "strategy reference: [strategy document](../design/strategy.md)"
msgstr "架构文档请参考: [strategy document](../design/strategy.md)"

#: ../../developer/design/flmodel.md:26
msgid "model definition"
msgstr "model definition"

#: ../../developer/design/flmodel.md:27
msgid ""
"The model definition in FLModel is basically the same as the plaintext. "
"The user's original plaintext code can be migrated to FLModel through "
"`Ctrl+C`, `Ctrl+V` to become a federated model. eg:   tensorflow backend"
msgstr "模型定义方法几乎和原生tf和torch一致，只需要ctrl+c ctrl+v到对应位置即可"

#: ../../developer/design/flmodel.md:89
msgid ""
"FLModel will send these parameters to the strategy dispatcher, and the "
"dispatcher will pull up different instances according to these "
"parameters. Pytorch or tensorflow will only have differences in the "
"lowest implementation layer, and the logic layer of FLModel will be "
"unified, and users do not need to perceive the difference. FLModel will "
"logically ensure the consistency of pytorch and tensorflow experience."
msgstr "FLModel会将这些参数发给strategy dispatcher，dispatcher根据这些参数拉起不同的实例，pytorch或者tensorflow只在最底层的实现层会有差别，在用户这一层无需感知。同时FLModel会在逻辑上保证pytorch和tensorflow使用体验上的一致。"

#: ../../developer/design/flmodel.md:91
msgid "Demo"
msgstr "Demo"

#: ../../developer/design/flmodel.md:92
msgid ""
"tensorflow backend: [Federated learning for image "
"classification](../../tutorial/Federate_Learning_for_Image_Classification.ipynb)"
"   pytorch backend: [Federated learning with pytorch "
"backend](../../tutorial/Federated_Learning_with_Pytorch_backend.ipynb)"
msgstr ""
"tensorflow backend: [Federated learning for image "
"classification](../../tutorial/Federate_Learning_for_Image_Classification.ipynb)"
"   pytorch backend: [Federated learning with pytorch "
"backend](../../tutorial/Federated_Learning_with_Pytorch_backend.ipynb)"

#: ../../developer/design/flmodel.md:95
msgid "API"
msgstr "API"

#: ../../developer/design/flmodel.md:96
msgid "Fit"
msgstr "Fit"

#: ../../developer/design/flmodel.md:97
msgid ""
"The fit interface is the training interface of FLModel, which supports "
"FedHDataFrame, FedNdarray, and csv path reading.   The return value is a "
"history object, which contains the index details and loss changes during "
"the training process.   At the same time, fl_model is the result after "
"training, and can be evaluated, predict, etc. on this basis."
msgstr ""
"fit接口是FLModel的训练接口，支持FedHDataFrame，FedNdarray以及csv路径等方式读取。"
"返回值是一个history对象，里面包含训练过程中的指标细节，和loss变化。"
"同时fl_model是训练后的结果，可以在这个基础上进行evaluate，predict 等。"


#: ../../developer/design/flmodel.md:100
msgid "Evaluate"
msgstr "Evaluate"

#: ../../developer/design/flmodel.md:101
msgid ""
"Evaluate is an offline evaluation interface.    Users can pass in the "
"HDataFrame or FedNdarray to be evaluated by each party. The return value "
"will be two objects `local metrics` and `global_metrics`."
msgstr ""
"evaluation是离线评估接口，用户可以传入各方待评估的HDataFrame或者FedNdarray。"
"返回值是两个对象local metrics和global_metrics。"


#: ../../developer/design/flmodel.md:104
msgid "Predict"
msgstr "Predict"

#: ../../developer/design/flmodel.md:105
msgid ""
"Predict is an offline prediction interface.    The user passes in the "
"HDataFrame or FedNdarray to be predicted by all parties. The return value"
" is a `Dict<PYU,PYUObject>`, where PYUObject is the prediction result "
"stored on each party, and the plaintext can only be seen after the "
"parties agree to be revealed"
msgstr ""
"Predict是离线预测接口，用户传入各方待预测的HDataFrame或者FedNdarray"
"返回值是一个Dict<PYU,PYUObject>, 其中PYUObject是每一方的预测结果，只有各方同意后被reveal出来才能看到明文"

#: ../../developer/design/flmodel.md:108
msgid "Load_model"
msgstr "Load_model"

#: ../../developer/design/flmodel.md:109
msgid ""
"load model is the model loading interface    model_path supports str or "
"Dict. If it is str, the default storage location of each party is the "
"same, and the path pointed to by str on each party. is_test: Whether the "
"mark is a stand-alone simulation, if it is a stand-alone simulation, a "
"first-level device directory will be added to the model_path to show the "
"difference"
msgstr ""
"load model是模型加载接口"
"model_path支持str或者Dict，如果是str默认各方存储位置一致，每一方str指向的路径。"
"is_test：标记是否为单机模拟，如果单机模拟的话，会在model_path的基础上增加一级device目录，以示区别"

#: ../../developer/design/flmodel.md:112
msgid "Save_model"
msgstr "Save_model"

#: ../../developer/design/flmodel.md:113
msgid ""
"save model is the model storage interface model_path supports str or "
"Dict. If str is the default storage location of all parties, the path "
"pointed to by str on each party. is_test: Whether the mark is a stand-"
"alone simulation, if it is a stand-alone simulation, a first-level device"
" directory will be added to the model_path to show the difference"
msgstr ""
"save model是模型存储接口"
"model_path支持str或者Dict，如果是str默认各方存储位置一致，每一方str指向的路径。"
"is_test：标记是否为单机模拟，如果单机模拟的话，会在model_path的基础上增加一级device目录，以示区别"

#: ../../developer/design/flmodel.md:118
msgid "Multiple Backend Support"
msgstr "多后端"

#: ../../developer/design/flmodel.md:119
msgid ""
"SecretFlow provides the base class of BaseModel, which defines a set of "
"methods required by workers in federated scenarios for FLModel to use in "
"process orchestration."
msgstr "SecretFlow提供了BaseModel的基类，定义了联邦场景下worker所必须的方法集合供FLModel在流程编排的时候使用。"

#: ../../developer/design/flmodel.md:120
msgid ""
"Specific TorchModel and TensorFlowModel will use their own engine-"
"specific API to implement these methods."
msgstr "具体的TorchModel和TensorFlowModel会使用自己引擎特有的API实现这些方法。"

#: ../../developer/design/flmodel.md:121
msgid ""
"Each strategy further down will implement its own train step and other "
"related strategies."
msgstr "再往下的各个strategy会各自实现自己的train step，以及相关其他策略。"

#: ../../developer/design/flmodel.md:122
msgid ""
"FLModel will use the strategy dispatcher to pull up specific instance "
"workers to complete the calculation."
msgstr "FLModel会借助strategy dispatcher将具体的实例worker拉起来完成计算。"

#: ../../developer/design/flmodel.md:124
msgid "![Strategy Classification](resources/strategy.png)"
msgstr "![Strategy Classification](resources/strategy.png)"

#: ../../developer/design/flmodel.md:124
msgid "Strategy Classification"
msgstr "Strategy Classification"

